{% comment %}
  DIY Label Universal Block
  Handles all contexts: product pages, cart, and checkout
  Automatically detects context and shows appropriate interface
{% endcomment %}

<div class="diy-label-universal-block" 
     id="diy-label-block-{{ block.id }}"
     data-block-id="{{ block.id }}"
     data-shop-domain="{{ shop.permanent_domain }}"
     data-theme="{{ block.settings.theme }}"
     data-api-url="{% if block.settings.api_url != blank %}{{ block.settings.api_url }}{% else %}https://spirits-plumbing-definitions-obituaries.trycloudflare.com{% endif %}"
     style="margin: {{ block.settings.margin }}px 0; 
            padding: {{ block.settings.padding }}px;
            {% if block.settings.background_color != blank %}background-color: {{ block.settings.background_color }};{% endif %}
            {% if block.settings.border_radius > 0 %}border-radius: {{ block.settings.border_radius }}px;{% endif %}
            {% if block.settings.show_border %}border: 1px solid {{ block.settings.border_color | default: '#e1e1e1' }};{% endif %}">
  
  <div id="diy-label-content-{{ block.id }}" class="diy-label-content">
    <div class="diy-label-loading" style="text-align: center; padding: 20px;">
      <p style="margin: 0; color: #666;">🌱 Loading DIY Label...</p>
    </div>
  </div>
</div>

<script>
(function() {
  'use strict';
  
  const blockId = '{{ block.id }}';
  const container = document.getElementById('diy-label-block-' + blockId);
  const content = document.getElementById('diy-label-content-' + blockId);
  
  if (!container || !content) return;
  
  const config = {
    blockId: blockId,
    shopDomain: container.getAttribute('data-shop-domain'),
    theme: container.getAttribute('data-theme'),
    apiUrl: container.getAttribute('data-api-url'),
    showTitle: {{ block.settings.show_title | json }},
    title: {{ block.settings.title | json }},
    showDescription: {{ block.settings.show_description | json }},
    description: {{ block.settings.description | json }}
  };
  
  // Detect context
  const context = detectContext();
  console.log('DIY Label: Detected context:', context);
  
  function detectContext() {
    // Check URL patterns
    const path = window.location.pathname;
    
    if (path.includes('/products/')) {
      return 'product';
    } else if (path.includes('/cart') || path.includes('/checkout')) {
      return 'cart';
    } else if (document.querySelector('.cart') || document.querySelector('[data-cart]')) {
      return 'cart';
    }
    
    // Check for product data
    if (typeof window.meta !== 'undefined' && window.meta.product) {
      return 'product';
    }
    
    // Default to cart context
    return 'cart';
  }
  
  // Get product ID for product context
  function getProductId() {
    // Method 1: From URL
    const pathParts = window.location.pathname.split('/');
    const productIndex = pathParts.indexOf('products');
    if (productIndex !== -1 && pathParts[productIndex + 1]) {
      return pathParts[productIndex + 1]; // This might be a handle
    }
    
    // Method 2: From meta tags
    const productMeta = document.querySelector('meta[property="product:id"]');
    if (productMeta) {
      return productMeta.getAttribute('content');
    }
    
    // Method 3: From global variables
    if (typeof window.meta !== 'undefined' && window.meta.product) {
      return window.meta.product.id;
    }
    
    return null;
  }
  
  // Initialize based on context
  async function initialize() {
    try {
      if (context === 'product') {
        await initializeProductContext();
      } else {
        await initializeCartContext();
      }
    } catch (error) {
      console.error('DIY Label initialization error:', error);
      showError('Failed to load DIY Label widget');
    }
  }
  
  // Product page context
  async function initializeProductContext() {
    const productId = getProductId();
    
    if (!productId) {
      content.style.display = 'none';
      return;
    }
    
    // Check if DIY Label is enabled for this product
    const isEnabled = await checkProductSettings(productId);
    
    if (!isEnabled) {
      content.style.display = 'none';
      return;
    }
    
    // Show product widget
    showProductWidget(productId);
  }
  
  // Cart/checkout context
  async function initializeCartContext() {
    const cartData = await getCartData();
    
    if (!cartData || !cartData.items) {
      content.style.display = 'none';
      return;
    }
    
    // Check for DIY Label enabled products
    const diyProducts = await checkCartForDIYProducts(cartData.items);
    
    if (diyProducts.length === 0) {
      content.style.display = 'none';
      return;
    }
    
    // Show cart widget
    showCartWidget(diyProducts, cartData);
  }
  
  // Check product settings
  async function checkProductSettings(productId) {
    try {
      const response = await fetch(
        config.apiUrl + '/api/product-settings?shop=' + 
        encodeURIComponent(config.shopDomain) + 
        '&product=' + encodeURIComponent(productId)
      );
      
      if (!response.ok) return false;
      
      const data = await response.json();
      return data.enabled || false;
    } catch (error) {
      console.error('Error checking product settings:', error);
      return false;
    }
  }
  
  // Get cart data
  async function getCartData() {
    try {
      const response = await fetch('/cart.js');
      return await response.json();
    } catch (error) {
      console.error('Error fetching cart:', error);
      return null;
    }
  }
  
  // Check cart for DIY products
  async function checkCartForDIYProducts(items) {
    const diyProducts = [];
    
    for (const item of items) {
      const productId = item.product_id;
      const isEnabled = await checkProductSettings(productId);
      
      if (isEnabled) {
        diyProducts.push({
          id: productId,
          title: item.product_title,
          quantity: item.quantity,
          handle: item.handle
        });
      }
    }
    
    return diyProducts;
  }
  
  // Show product widget
  function showProductWidget(productId) {
    let html = '';
    
    if (config.showTitle) {
      html += '<h3 style="margin: 0 0 16px 0; font-size: 20px; font-weight: 600;">' + 
              (config.title || '🌱 Choose Local Printing') + '</h3>';
    }
    
    if (config.showDescription) {
      html += '<p style="margin: 0 0 20px 0; color: #666;">' + 
              (config.description || 'Support your local community and reduce shipping impact by printing this item at a nearby shop.') + '</p>';
    }
    
    html += '<button id="diy-label-product-btn-' + blockId + '" ' +
            'style="width: 100%; padding: 12px 24px; background: #007cba; color: white; border: none; border-radius: 6px; font-size: 16px; font-weight: 600; cursor: pointer;">' +
            '🌱 Choose Local Print Shop</button>';
    
    content.innerHTML = html;
    
    // Add click handler
    document.getElementById('diy-label-product-btn-' + blockId).addEventListener('click', function() {
      openModal('product', { productId: productId });
    });
  }
  
  // Show cart widget
  function showCartWidget(diyProducts, cartData) {
    const totalQuantity = diyProducts.reduce((sum, p) => sum + p.quantity, 0);
    const hasSelection = cartData.attributes && cartData.attributes.diy_label_enabled === 'true';
    const selectedShop = cartData.attributes ? cartData.attributes.diy_label_print_shop_name : null;
    
    let html = '';
    
    if (config.showTitle) {
      html += '<h3 style="margin: 0 0 16px 0; font-size: 18px; font-weight: 600;">' + 
              (config.title || '🌱 Local Printing Available') + '</h3>';
    }
    
    if (hasSelection) {
      html += '<div style="display: flex; align-items: center; justify-content: space-between; padding: 12px; background: #e8f5e8; border-radius: 6px; margin-bottom: 12px;">' +
              '<div>' +
              '<p style="margin: 0; font-weight: 600; color: #28a745;">✅ Local Print Shop Selected</p>' +
              '<p style="margin: 0; font-size: 14px; color: #666;">' + selectedShop + '</p>' +
              '</div>' +
              '<button onclick="window.diyLabelOpenModal_' + blockId + '()" style="padding: 8px 16px; background: #007cba; color: white; border: none; border-radius: 4px; cursor: pointer;">Change</button>' +
              '</div>';
    } else {
      html += '<div style="padding: 12px; background: #f8f9fa; border-radius: 6px; margin-bottom: 12px;">' +
              '<p style="margin: 0 0 8px 0; font-weight: 600;">' + totalQuantity + ' item' + (totalQuantity !== 1 ? 's' : '') + ' can be printed locally</p>' +
              '<p style="margin: 0 0 12px 0; font-size: 14px; color: #666;">Reduce shipping impact and support your community</p>' +
              '<button onclick="window.diyLabelOpenModal_' + blockId + '()" style="width: 100%; padding: 10px; background: #28a745; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer;">Choose Local Print Shop</button>' +
              '</div>';
    }
    
    content.innerHTML = html;
    
    // Create global function for modal
    window['diyLabelOpenModal_' + blockId] = function() {
      openModal('cart', { products: diyProducts, cartData: cartData });
    };
  }
  
  // Open modal
  function openModal(context, data) {
    // Create modal
    const modal = document.createElement('div');
    modal.id = 'diy-label-modal-' + blockId;
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 10000;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      box-sizing: border-box;
    `;
    
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
      background: white;
      border-radius: 12px;
      width: 100%;
      max-width: 900px;
      max-height: 90vh;
      overflow: hidden;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      position: relative;
      display: flex;
      flex-direction: column;
    `;
    
    const modalHeader = document.createElement('div');
    modalHeader.style.cssText = `
      padding: 20px 24px;
      border-bottom: 1px solid #e1e1e1;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: #f8f9fa;
    `;
    
    const modalTitle = document.createElement('h2');
    modalTitle.style.cssText = `
      margin: 0;
      font-size: 20px;
      font-weight: 600;
      color: #333333;
    `;
    modalTitle.textContent = '🌱 Choose Local Print Shop';
    
    const closeButton = document.createElement('button');
    closeButton.style.cssText = `
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #666666;
      padding: 4px;
      border-radius: 4px;
    `;
    closeButton.innerHTML = '×';
    closeButton.addEventListener('click', function() {
      document.body.removeChild(modal);
    });
    
    modalHeader.appendChild(modalTitle);
    modalHeader.appendChild(closeButton);
    
    const modalBody = document.createElement('div');
    modalBody.style.cssText = `
      flex: 1;
      overflow-y: auto;
      padding: 0;
    `;
    
    // Create iframe for the widget
    const iframe = document.createElement('iframe');
    const iframeSrc = config.apiUrl + '/widget?' + 
      'shop=' + encodeURIComponent(config.shopDomain) + 
      '&source=' + encodeURIComponent(context) +
      '&theme=' + encodeURIComponent(config.theme);
    
    if (context === 'product' && data.productId) {
      iframe.src = iframeSrc + '&product=' + encodeURIComponent(data.productId);
    } else {
      iframe.src = iframeSrc;
    }
    
    iframe.style.cssText = 'width: 100%; height: 600px; border: none; background: white;';
    iframe.frameBorder = '0';
    iframe.loading = 'lazy';
    
    // Handle iframe messages
    window.addEventListener('message', function(event) {
      if (event.origin !== config.apiUrl) return;
      
      if (event.data.type === 'diy-label-resize') {
        iframe.style.height = Math.max(600, event.data.height) + 'px';
      }
      
      if (event.data.type === 'diy-label-selection') {
        const printShop = event.data.printShop;
        
        if (context === 'product') {
          // For product pages, just show success
          showSuccessMessage(printShop.name);
        } else {
          // For cart, update cart attributes
          updateCartWithSelection(printShop);
        }
        
        // Close modal
        document.body.removeChild(modal);
        
        // Refresh widget if cart context
        if (context === 'cart') {
          setTimeout(() => {
            initialize();
          }, 1000);
        }
      }
    });
    
    modalBody.appendChild(iframe);
    modalContent.appendChild(modalHeader);
    modalContent.appendChild(modalBody);
    modal.appendChild(modalContent);
    
    document.body.appendChild(modal);
    
    // Close on outside click
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  }
  
  // Update cart with selection
  async function updateCartWithSelection(printShop) {
    try {
      const updateData = {
        attributes: {
          'diy_label_enabled': 'true',
          'diy_label_print_shop_id': printShop.id.toString(),
          'diy_label_print_shop_name': printShop.name,
          'diy_label_print_shop_address': printShop.address
        }
      };
      
      const response = await fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData)
      });
      
      if (response.ok) {
        // 1. Scroll modal to top
        const modal = document.getElementById('diy-label-modal-' + blockId);
        if (modal) {
          const modalBody = modal.querySelector('div[style*="overflow-y: auto"]');
          if (modalBody) {
            modalBody.scrollTop = 0;
          }
        }
        
        // 2. Show success alert
        const successMessage = 'Print shop selected: ' + printShop.name + '\\n\\n' +
          'Your order will be printed locally when you complete checkout!';
        
        alert(successMessage);
        
        // 3. Update modal content with selection and buttons
        updateModalWithSelection(printShop);
        
        // 4. Auto-close modal after 5 seconds
        setTimeout(function() {
          const modal = document.getElementById('diy-label-modal-' + blockId);
          if (modal) {
            document.body.removeChild(modal);
          }
        }, 5000);
      }
    } catch (error) {
      console.error('Error updating cart:', error);
    }
  }
  
  // Function to update modal with selection and cart buttons
  function updateModalWithSelection(printShop) {
    const modal = document.getElementById('diy-label-modal-' + blockId);
    if (!modal) return;
    
    const modalBody = modal.querySelector('div[style*="overflow-y: auto"]');
    if (!modalBody) return;
    
    // Create new content
    const newContent = document.createElement('div');
    newContent.style.cssText = 'padding: 24px; text-align: center;';
    
    newContent.innerHTML = `
      <h3 style="margin: 0 0 16px 0; font-size: 24px; font-weight: 600; color: #28a745;">
        ✅ Print Shop Selected
      </h3>
      <div id="location-status-${blockId}" style="display: inline-block; padding: 12px 24px; background: #e8f5e8; border-radius: 6px; margin-bottom: 20px;">
        <p style="margin: 0; font-size: 16px; font-weight: 600; color: #28a745;">
          📍 Selected: ${printShop.name}
        </p>
      </div>
      <div id="diy-label-cart-buttons-${blockId}" style="display: flex; gap: 12px; flex-wrap: wrap; justify-content: center;">
        <button id="add-to-cart-btn-${blockId}" style="
          flex: 1;
          min-width: 140px;
          max-width: 200px;
          padding: 12px 24px;
          background: #007cba;
          color: white;
          border: none;
          border-radius: 6px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: background-color 0.2s;
        ">🛒 Add to Cart</button>
        <button id="buy-now-btn-${blockId}" style="
          flex: 1;
          min-width: 140px;
          max-width: 200px;
          padding: 12px 24px;
          background: #28a745;
          color: white;
          border: none;
          border-radius: 6px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: background-color 0.2s;
        ">⚡ Buy It Now</button>
      </div>
    `;
    
    // Replace modal body content
    modalBody.innerHTML = '';
    modalBody.appendChild(newContent);
    
    // Add event listeners
    const addToCartBtn = document.getElementById('add-to-cart-btn-' + blockId);
    const buyNowBtn = document.getElementById('buy-now-btn-' + blockId);
    
    if (addToCartBtn) {
      addToCartBtn.addEventListener('mouseenter', function() {
        this.style.backgroundColor = '#005a8b';
      });
      addToCartBtn.addEventListener('mouseleave', function() {
        this.style.backgroundColor = '#007cba';
      });
      addToCartBtn.addEventListener('click', function() {
        handleAddToCart();
      });
    }
    
    if (buyNowBtn) {
      buyNowBtn.addEventListener('mouseenter', function() {
        this.style.backgroundColor = '#1e7e34';
      });
      buyNowBtn.addEventListener('mouseleave', function() {
        this.style.backgroundColor = '#28a745';
      });
      buyNowBtn.addEventListener('click', function() {
        handleBuyNow();
      });
    }
  }
  
  // Function to handle Add to Cart
  function handleAddToCart() {
    // Close modal immediately
    const modal = document.getElementById('diy-label-modal-' + blockId);
    if (modal) {
      document.body.removeChild(modal);
    }
    
    // Find and trigger the actual Add to Cart button on the page
    const productForm = document.querySelector('form[action*="/cart/add"]');
    if (productForm) {
      const addToCartButton = productForm.querySelector('button[type="submit"], input[type="submit"]');
      if (addToCartButton) {
        addToCartButton.click();
      } else {
        // Fallback: submit the form directly
        productForm.submit();
      }
    } else {
      // Fallback: try to find any add to cart button
      const addToCartBtn = document.querySelector('[data-add-to-cart], .add-to-cart, .btn-add-to-cart');
      if (addToCartBtn) {
        addToCartBtn.click();
      } else {
        alert('Add to cart functionality not found. Please add the item to cart manually.');
      }
    }
  }
  
  // Function to handle Buy It Now
  function handleBuyNow() {
    // Close modal immediately
    const modal = document.getElementById('diy-label-modal-' + blockId);
    if (modal) {
      document.body.removeChild(modal);
    }
    
    // Find and trigger Buy It Now button or redirect to checkout
    const buyNowButton = document.querySelector('.shopify-payment-button button, [data-buy-now], .buy-now, .btn-buy-now');
    if (buyNowButton) {
      buyNowButton.click();
    } else {
      // Fallback: add to cart and redirect to checkout
      handleAddToCart();
      setTimeout(() => {
        window.location.href = '/checkout';
      }, 500);
    }
  }
  
  // Show success message
  function showSuccessMessage(shopName) {
    const message = document.createElement('div');
    message.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #28a745;
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      z-index: 10001;
      font-family: system-ui, -apple-system, sans-serif;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      max-width: 300px;
    `;
    message.innerHTML = '<strong>✅ Print Shop Selected</strong><br>' + shopName;
    
    document.body.appendChild(message);
    
    setTimeout(function() {
      if (message.parentNode) {
        message.parentNode.removeChild(message);
      }
    }, 4000);
  }
  
  // Show error
  function showError(message) {
    content.innerHTML = '<div style="text-align: center; padding: 20px; color: #d32f2f;"><p>' + message + '</p></div>';
  }
  
  // Initialize when ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }
  
})();
</script>

{% schema %}
{
  "name": "DIY Label Universal",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "checkbox",
      "id": "show_title",
      "label": "Show Title",
      "default": true
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "🌱 Choose Local Printing"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "Show Description",
      "default": true
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Support your local community and reduce shipping impact by printing this item at a nearby shop."
    },
    {
      "type": "header",
      "content": "Widget Settings"
    },
    {
      "type": "select",
      "id": "theme",
      "label": "Widget Theme",
      "options": [
        { "value": "light", "label": "Light" },
        { "value": "dark", "label": "Dark" },
        { "value": "auto", "label": "Auto" }
      ],
      "default": "light"
    },
    {
      "type": "url",
      "id": "api_url",
      "label": "API URL",
      "info": "DIY Label API endpoint"
    },
    {
      "type": "header",
      "content": "Styling"
    },
    {
      "type": "range",
      "id": "margin",
      "label": "Margin (px)",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 20
    },
    {
      "type": "range",
      "id": "padding",
      "label": "Padding (px)",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 20
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color"
    },
    {
      "type": "checkbox",
      "id": "show_border",
      "label": "Show Border",
      "default": true
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border Color",
      "default": "#e1e1e1"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Border Radius (px)",
      "min": 0,
      "max": 20,
      "step": 2,
      "default": 8
    }
  ]
}
{% endschema %}