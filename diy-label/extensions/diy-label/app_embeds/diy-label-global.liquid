{% comment %}
  DIY Label Global App Embed
  This loads on every page when enabled in theme customizer
{% endcomment %}

{% if app.enabled %}
<script>
  window.DIYLabelConfig = window.DIYLabelConfig || {};
  window.DIYLabelConfig.settings = {
    enabled: {{ app.enabled | json }},
    theme: {{ app.theme | default: 'light' | json }},
    searchRadius: {{ app.search_radius | default: 25 | json }},
    showOnAllProducts: {{ app.show_on_all_products | default: false | json }},
    apiUrl: {{ app.api_url | default: 'https://increasing-exercise-calculation-yo.trycloudflare.com' | json }},
    shopDomain: {{ shop.permanent_domain | json }}
  };
  
  console.log('DIY Label Config loaded:', window.DIYLabelConfig.settings);
</script>

<script>
(function() {
  'use strict';
  
  // Only run on product pages or if show_on_all_products is enabled
  const isProductPage = window.location.pathname.includes('/products/');
  const showOnAllProducts = window.DIYLabelConfig.settings.showOnAllProducts;
  
  console.log('DIY Label: Page check - isProductPage:', isProductPage, 'showOnAllProducts:', showOnAllProducts);
  
  if (!isProductPage && !showOnAllProducts) {
    console.log('DIY Label: Skipping - not product page and not enabled for all products');
    return;
  }
  
  // Get product ID from page
  let productId = null;
  
  if (isProductPage) {
    // Try multiple methods to get product ID
    
    // Method 1: Meta tag
    const productMeta = document.querySelector('meta[property="product:id"]');
    if (productMeta) {
      productId = productMeta.getAttribute('content');
      console.log('DIY Label: Product ID from meta tag:', productId);
    }
    
    // Method 2: Shopify global object
    if (!productId && typeof window.ShopifyAnalytics !== 'undefined' && window.ShopifyAnalytics.meta) {
      productId = window.ShopifyAnalytics.meta.product?.id;
      console.log('DIY Label: Product ID from ShopifyAnalytics:', productId);
    }
    
    // Method 3: Try to find product data in page
    if (!productId) {
      const scripts = document.querySelectorAll('script[type="application/ld+json"]');
      for (const script of scripts) {
        try {
          const data = JSON.parse(script.textContent);
          if (data['@type'] === 'Product' && data.productID) {
            productId = data.productID;
            console.log('DIY Label: Product ID from JSON-LD:', productId);
            break;
          }
        } catch (e) {
          // Ignore parsing errors
        }
      }
    }
    
    // Method 4: Look for Shopify product object
    if (!productId && typeof window.product !== 'undefined' && window.product.id) {
      productId = window.product.id;
      console.log('DIY Label: Product ID from window.product:', productId);
    }
  }
  
  // Function to check if DIY Label is enabled for this product
  async function checkProductSettings(productId) {
    if (!productId) return showOnAllProducts;
    
    try {
      console.log('DIY Label: Checking product settings for:', productId);
      const response = await fetch(
        `${window.DIYLabelConfig.settings.apiUrl}/api/product-settings?shop=${encodeURIComponent(window.DIYLabelConfig.settings.shopDomain)}&product=${encodeURIComponent(productId)}`
      );
      
      if (!response.ok) {
        console.log('DIY Label: Product settings API failed:', response.status);
        return showOnAllProducts;
      }
      
      const data = await response.json();
      console.log('DIY Label: Product settings response:', data);
      return data.enabled || showOnAllProducts;
    } catch (error) {
      console.error('DIY Label: Error checking product settings:', error);
      return showOnAllProducts;
    }
  }
  
  // Function to create and inject the widget
  function createWidget(productId) {
    // Check if widget already exists
    if (document.getElementById('diy-label-auto-widget')) {
      console.log('DIY Label: Widget already exists');
      return;
    }
    
    console.log('DIY Label: Creating widget for product:', productId);
    
    // Find a good place to inject the widget
    let targetElement = null;
    
    // Try common selectors for product forms
    const selectors = [
      '.product-form',
      '.product__form',
      '.product-single__form',
      '[data-product-form]',
      '.shopify-product-form',
      '.product-form-container',
      '.product__info',
      '.product-info',
      '.product-details',
      '.product__content',
      '.product-content',
      '.product__description',
      '.product-description'
    ];
    
    for (const selector of selectors) {
      targetElement = document.querySelector(selector);
      if (targetElement) {
        console.log('DIY Label: Found target element:', selector);
        break;
      }
    }
    
    // Fallback: try to find any form with product in the action
    if (!targetElement) {
      const forms = document.querySelectorAll('form');
      for (const form of forms) {
        if (form.action && form.action.includes('/cart/add')) {
          targetElement = form.parentElement;
          console.log('DIY Label: Found target via cart form');
          break;
        }
      }
    }
    
    // Last resort: append to main content area
    if (!targetElement) {
      targetElement = document.querySelector('main') || document.querySelector('.main') || document.body;
      console.log('DIY Label: Using fallback target element');
    }
    
    // Create widget container
    const widgetContainer = document.createElement('div');
    widgetContainer.id = 'diy-label-auto-widget';
    widgetContainer.style.cssText = `
      margin: 30px 0;
      padding: 20px;
      border: 1px solid #e1e1e1;
      border-radius: 8px;
      background: ${window.DIYLabelConfig.settings.theme === 'dark' ? '#1a1a1a' : '#f9f9f9'};
      font-family: system-ui, -apple-system, sans-serif;
    `;
    
    // Create widget content
    widgetContainer.innerHTML = `
      <div id="diy-label-widget-auto" 
           data-product-id="${productId || ''}"
           data-shop-domain="${window.DIYLabelConfig.settings.shopDomain}"
           data-theme="${window.DIYLabelConfig.settings.theme}"
           data-radius="${window.DIYLabelConfig.settings.searchRadius}"
           style="min-height: 400px;">
        
        <div class="diy-label-loading" style="text-align: center; padding: 40px 20px;">
          <h3 style="margin: 0 0 16px 0; color: ${window.DIYLabelConfig.settings.theme === 'dark' ? '#fff' : '#333'};">
            🌱 Choose Local Printing
          </h3>
          <p style="margin: 0; color: ${window.DIYLabelConfig.settings.theme === 'dark' ? '#ccc' : '#666'};">
            Loading sustainable printing options...
          </p>
        </div>
      </div>
    `;
    
    // Insert widget after the target element
    if (targetElement.parentNode) {
      targetElement.parentNode.insertBefore(widgetContainer, targetElement.nextSibling);
    } else {
      targetElement.appendChild(widgetContainer);
    }
    
    // Load the widget iframe
    loadWidgetIframe(productId);
  }
  
  // Function to load the widget iframe
  function loadWidgetIframe(productId) {
    const widgetElement = document.getElementById('diy-label-widget-auto');
    if (!widgetElement) {
      console.error('DIY Label: Widget element not found');
      return;
    }
    
    console.log('DIY Label: Loading iframe for product:', productId);
    
    // Create iframe
    const iframe = document.createElement('iframe');
    iframe.src = `${window.DIYLabelConfig.settings.apiUrl}/widget?` + 
      `shop=${encodeURIComponent(window.DIYLabelConfig.settings.shopDomain)}&` +
      `${productId ? 'product=' + encodeURIComponent(productId) + '&' : ''}` +
      `theme=${encodeURIComponent(window.DIYLabelConfig.settings.theme)}`;
    
    iframe.style.cssText = `
      width: 100%;
      height: 600px;
      border: none;
      border-radius: 8px;
      background: transparent;
    `;
    iframe.frameBorder = '0';
    iframe.loading = 'lazy';
    
    console.log('DIY Label: Iframe src:', iframe.src);
    
    // Handle iframe load events
    iframe.onload = function() {
      console.log('DIY Label: Iframe loaded successfully');
    };
    
    iframe.onerror = function() {
      console.error('DIY Label: Iframe failed to load');
      showErrorMessage('Unable to load DIY Label widget');
    };
    
    // Handle iframe messages for dynamic resizing
    window.addEventListener('message', function(event) {
      if (event.origin !== window.DIYLabelConfig.settings.apiUrl) return;
      
      console.log('DIY Label: Received message:', event.data);
      
      if (event.data.type === 'diy-label-resize') {
        iframe.style.height = Math.max(400, event.data.height) + 'px';
      }
      
      if (event.data.type === 'diy-label-selection') {
        console.log('DIY Label: Print shop selected:', event.data.printShop);
        
        // Dispatch custom event for theme integration
        const customEvent = new CustomEvent('diyLabelSelection', {
          detail: {
            printShop: event.data.printShop,
            productId: productId
          }
        });
        document.dispatchEvent(customEvent);
        
        // Show success message
        showSuccessMessage(event.data.printShop.name);
      }
      
      if (event.data.type === 'diy-label-error') {
        console.error('DIY Label: Widget error:', event.data.error);
        showErrorMessage('Unable to load print shops. Please try again later.');
      }
    });
    
    // Replace loading content with iframe
    widgetElement.innerHTML = '';
    widgetElement.appendChild(iframe);
  }
  
  // Function to show success message
  function showSuccessMessage(printShopName) {
    const message = document.createElement('div');
    message.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #28a745;
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      z-index: 9999;
      font-family: system-ui, -apple-system, sans-serif;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      max-width: 300px;
    `;
    message.innerHTML = `
      <strong>✅ Print Shop Selected</strong><br>
      ${printShopName}
    `;
    
    document.body.appendChild(message);
    
    setTimeout(() => {
      if (message.parentNode) {
        message.parentNode.removeChild(message);
      }
    }, 4000);
  }
  
  // Function to show error message
  function showErrorMessage(errorText) {
    const widgetElement = document.getElementById('diy-label-widget-auto');
    if (widgetElement) {
      widgetElement.innerHTML = `
        <div style="text-align: center; padding: 40px 20px; color: #d32f2f;">
          <h4 style="margin: 0 0 10px 0;">⚠️ Error Loading Widget</h4>
          <p style="margin: 0;">${errorText}</p>
        </div>
      `;
    }
  }
  
  // Main initialization function
  async function initializeDIYLabel() {
    console.log('DIY Label: Initializing with product ID:', productId);
    
    // Check if DIY Label is enabled for this product (unless show on all products is enabled)
    const isEnabled = await checkProductSettings(productId);
    console.log('DIY Label: Enabled check result:', isEnabled);
    
    if (!isEnabled) {
      console.log('DIY Label: Not enabled for this product/page');
      return;
    }
    
    // Create and inject the widget
    createWidget(productId);
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDIYLabel);
  } else {
    // Small delay to ensure page is fully loaded
    setTimeout(initializeDIYLabel, 500);
  }
  
  // Also initialize on page changes (for SPA-like themes)
  let lastUrl = location.href;
  new MutationObserver(() => {
    const url = location.href;
    if (url !== lastUrl) {
      lastUrl = url;
      console.log('DIY Label: Page changed, reinitializing');
      setTimeout(initializeDIYLabel, 1000); // Longer delay for page changes
    }
  }).observe(document, { subtree: true, childList: true });
  
})();
</script>
{% endif %}

{% schema %}
{
  "name": "DIY Label Global",
  "settings": [
    {
      "type": "checkbox",
      "id": "enabled",
      "label": "Enable DIY Label",
      "default": true
    },
    {
      "type": "select",
      "id": "theme",
      "label": "Widget Theme",
      "options": [
        {
          "value": "light",
          "label": "Light"
        },
        {
          "value": "dark",
          "label": "Dark"
        },
        {
          "value": "auto",
          "label": "Auto"
        }
      ],
      "default": "light"
    },
    {
      "type": "range",
      "id": "search_radius",
      "label": "Search Radius (miles)",
      "min": 5,
      "max": 100,
      "step": 5,
      "default": 25
    },
    {
      "type": "checkbox",
      "id": "show_on_all_products",
      "label": "Show on All Products",
      "info": "Display widget on all products (otherwise only enabled products)",
      "default": false
    },
    {
      "type": "url",
      "id": "api_url",
      "label": "API URL",
      "info": "DIY Label API endpoint",
      "default": "https://increasing-exercise-calculation-yo.trycloudflare.com"
    }
  ]
}
{% endschema %}