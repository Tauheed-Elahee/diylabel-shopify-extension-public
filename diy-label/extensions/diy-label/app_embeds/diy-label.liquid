{% comment %}
  DIY Label App Embed
  This loads globally when enabled in theme customizer
  Combines functionality from all app embed variants
{% endcomment %}

{% if app.enabled %}
<script>
  window.DIYLabelConfig = window.DIYLabelConfig || {};
  window.DIYLabelConfig.settings = {
    enabled: {{ app.enabled | json }},
    theme: {{ app.theme | default: 'light' | json }},
    searchRadius: {{ app.search_radius | default: 25 | json }},
    showOnAllProducts: {{ app.show_on_all_products | default: false | json }},
    autoInject: {{ app.auto_inject | default: true | json }},
    apiUrl: {{ app.api_url | default: 'https://increasing-exercise-calculation-yo.trycloudflare.com' | json }},
    shopDomain: {{ shop.permanent_domain | json }}
  };
</script>

<script>
(function() {
  'use strict';
  
  // Only run on product pages or if show_on_all_products is enabled
  const isProductPage = window.location.pathname.includes('/products/');
  const showOnAllProducts = window.DIYLabelConfig.settings.showOnAllProducts;
  const autoInject = window.DIYLabelConfig.settings.autoInject;
  
  if (!autoInject || (!isProductPage && !showOnAllProducts)) {
    return;
  }
  
  // Get product ID from page
  let productId = null;
  
  if (isProductPage) {
    // Try to get product ID from meta tag
    const productMeta = document.querySelector('meta[property="product:id"]');
    if (productMeta) {
      productId = productMeta.getAttribute('content');
    }
    
    // Fallback: try to get from Shopify global object
    if (!productId && typeof window.ShopifyAnalytics !== 'undefined' && window.ShopifyAnalytics.meta) {
      productId = window.ShopifyAnalytics.meta.product?.id;
    }
    
    // Another fallback: try to get from URL
    if (!productId) {
      const pathParts = window.location.pathname.split('/');
      const productIndex = pathParts.indexOf('products');
      if (productIndex !== -1 && pathParts[productIndex + 1]) {
        const productHandle = pathParts[productIndex + 1];
        productId = productHandle;
      }
    }
  }
  
  // Function to check if DIY Label is enabled for this product
  async function checkProductSettings(productId) {
    if (!productId) return false;
    
    try {
      const response = await fetch(
        window.DIYLabelConfig.settings.apiUrl + '/api/product-settings?shop=' + 
        encodeURIComponent(window.DIYLabelConfig.settings.shopDomain) + 
        '&product=' + encodeURIComponent(productId)
      );
      
      if (!response.ok) return false;
      
      const data = await response.json();
      return data.enabled || false;
    } catch (error) {
      console.error('DIY Label: Error checking product settings:', error);
      return false;
    }
  }
  
  // Function to create and inject the widget
  function createWidget(productId) {
    // Check if widget already exists
    if (document.getElementById('diy-label-widget-container')) {
      return;
    }
    
    // Find a good place to inject the widget
    let targetElement = null;
    
    // Try common selectors for product forms
    const selectors = [
      '.product-form',
      '.product__form',
      '.product-single__form',
      '[data-product-form]',
      '.shopify-product-form',
      '.product-form-container',
      '.product__info',
      '.product-info',
      '.product-details',
      '.product__content',
      '.product-content'
    ];
    
    for (const selector of selectors) {
      targetElement = document.querySelector(selector);
      if (targetElement) break;
    }
    
    // Fallback: try to find any form with product in the action
    if (!targetElement) {
      const forms = document.querySelectorAll('form');
      for (const form of forms) {
        if (form.action && form.action.includes('/cart/add')) {
          targetElement = form.parentElement;
          break;
        }
      }
    }
    
    // Last resort: append to main content area
    if (!targetElement) {
      targetElement = document.querySelector('main') || document.body;
    }
    
    // Create widget container
    const widgetContainer = document.createElement('div');
    widgetContainer.id = 'diy-label-widget-container';
    widgetContainer.style.cssText = 'margin: 20px 0; padding: 20px; border: 1px solid #e1e1e1; border-radius: 8px; background: ' + 
      (window.DIYLabelConfig.settings.theme === 'dark' ? '#1a1a1a' : '#f9f9f9') + 
      '; font-family: system-ui, -apple-system, sans-serif;';
    
    // Create widget content
    widgetContainer.innerHTML = 
      '<div id="diy-label-widget" data-product-id="' + productId + '" data-shop-domain="' + 
      window.DIYLabelConfig.settings.shopDomain + '" data-theme="' + 
      window.DIYLabelConfig.settings.theme + '" data-radius="' + 
      window.DIYLabelConfig.settings.searchRadius + '" style="min-height: 400px;">' +
      '<div class="diy-label-loading" style="text-align: center; padding: 40px 20px;">' +
      '<h3 style="margin: 0 0 16px 0; color: ' + 
      (window.DIYLabelConfig.settings.theme === 'dark' ? '#fff' : '#333') + ';">üå± Choose Local Printing</h3>' +
      '<p style="margin: 0; color: ' + 
      (window.DIYLabelConfig.settings.theme === 'dark' ? '#ccc' : '#666') + ';">Loading sustainable printing options...</p>' +
      '</div></div>';
    
    // Insert widget after the target element
    if (targetElement.parentNode) {
      targetElement.parentNode.insertBefore(widgetContainer, targetElement.nextSibling);
    } else {
      targetElement.appendChild(widgetContainer);
    }
    
    // Load the widget iframe
    loadWidgetIframe(productId);
  }
  
  // Function to load the widget iframe
  function loadWidgetIframe(productId) {
    const widgetElement = document.getElementById('diy-label-widget');
    if (!widgetElement) return;
    
    // Create iframe
    const iframe = document.createElement('iframe');
    iframe.src = window.DIYLabelConfig.settings.apiUrl + '/widget?' + 
      'shop=' + encodeURIComponent(window.DIYLabelConfig.settings.shopDomain) + 
      '&product=' + encodeURIComponent(productId) + 
      '&theme=' + encodeURIComponent(window.DIYLabelConfig.settings.theme);
    
    iframe.style.cssText = 'width: 100%; height: 600px; border: none; border-radius: 8px; background: transparent;';
    iframe.frameBorder = '0';
    iframe.loading = 'lazy';
    
    // Handle iframe messages for dynamic resizing
    window.addEventListener('message', function(event) {
      if (event.origin !== window.DIYLabelConfig.settings.apiUrl) return;
      
      if (event.data.type === 'diy-label-resize') {
        iframe.style.height = Math.max(400, event.data.height) + 'px';
      }
      
      if (event.data.type === 'diy-label-selection') {
        console.log('DIY Label: Print shop selected:', event.data.printShop);
        
        // Dispatch custom event for theme integration
        const customEvent = new CustomEvent('diyLabelSelection', {
          detail: {
            printShop: event.data.printShop,
            productId: productId
          }
        });
        document.dispatchEvent(customEvent);
        
        // Show success message
        showSuccessMessage(event.data.printShop.name);
      }
      
      if (event.data.type === 'diy-label-error') {
        console.error('DIY Label: Widget error:', event.data.error);
        showErrorMessage('Unable to load print shops. Please try again later.');
      }
    });
    
    // Replace loading content with iframe
    widgetElement.innerHTML = '';
    widgetElement.appendChild(iframe);
  }
  
  // Function to show success message
  function showSuccessMessage(printShopName) {
    const message = document.createElement('div');
    message.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #28a745; color: white; padding: 15px 20px; border-radius: 8px; z-index: 9999; font-family: system-ui, -apple-system, sans-serif; box-shadow: 0 4px 12px rgba(0,0,0,0.15); max-width: 300px;';
    message.innerHTML = '<strong>‚úÖ Print Shop Selected</strong><br>' + printShopName;
    
    document.body.appendChild(message);
    
    setTimeout(function() {
      if (message.parentNode) {
        message.parentNode.removeChild(message);
      }
    }, 4000);
  }
  
  // Function to show error message
  function showErrorMessage(errorText) {
    const widgetElement = document.getElementById('diy-label-widget');
    if (widgetElement) {
      widgetElement.innerHTML = '<div style="text-align: center; padding: 40px 20px; color: #d32f2f;"><h4 style="margin: 0 0 10px 0;">‚ö†Ô∏è Error Loading Widget</h4><p style="margin: 0;">' + errorText + '</p></div>';
    }
  }
  
  // Main initialization function
  async function initializeDIYLabel() {
    if (!productId) {
      console.log('DIY Label: No product ID found, skipping widget');
      return;
    }
    
    // Check if DIY Label is enabled for this product (unless show on all products is enabled)
    if (!showOnAllProducts) {
      const isEnabled = await checkProductSettings(productId);
      if (!isEnabled) {
        console.log('DIY Label: Not enabled for this product');
        return;
      }
    }
    
    // Create and inject the widget
    createWidget(productId);
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDIYLabel);
  } else {
    initializeDIYLabel();
  }
  
  // Also initialize on page changes (for SPA-like themes)
  let lastUrl = location.href;
  new MutationObserver(function() {
    const url = location.href;
    if (url !== lastUrl) {
      lastUrl = url;
      setTimeout(initializeDIYLabel, 500);
    }
  }).observe(document, { subtree: true, childList: true });
  
})();
</script>
{% endif %}

{% schema %}
{
  "name": "DIY Label",
  "settings": [
    {
      "type": "checkbox",
      "id": "enabled",
      "label": "Enable DIY Label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "auto_inject",
      "label": "Auto-inject on Product Pages",
      "info": "Automatically add widget to product pages when enabled",
      "default": true
    },
    {
      "type": "select",
      "id": "theme",
      "label": "Widget Theme",
      "options": [
        {
          "value": "light",
          "label": "Light"
        },
        {
          "value": "dark",
          "label": "Dark"
        },
        {
          "value": "auto",
          "label": "Auto"
        }
      ],
      "default": "light"
    },
    {
      "type": "range",
      "id": "search_radius",
      "label": "Search Radius (miles)",
      "min": 5,
      "max": 100,
      "step": 5,
      "default": 25
    },
    {
      "type": "checkbox",
      "id": "show_on_all_products",
      "label": "Show on All Products",
      "info": "Display widget on all products (otherwise only enabled products)",
      "default": false
    },
    {
      "type": "url",
      "id": "api_url",
      "label": "API URL",
      "info": "DIY Label API endpoint",
      "default": "https://increasing-exercise-calculation-yo.trycloudflare.com"
    }
  ]
}
{% endschema %}